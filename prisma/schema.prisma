// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  slug            String   @unique
  email           String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  profile         Profile?
  authenticators  Authenticator[]
  followings      Follow[] @relation("follower")
  followers       Follow[] @relation("following")
}

model Profile {
  id              String   @id @default(cuid())
  name            String
  image           String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  id           String   @id @default(cuid())
  follower     User     @relation(name: "follower", fields: [followerId], references: [id],onDelete: Cascade)
  followerId   String
  following    User     @relation(name: "following", fields: [followingId], references: [id],onDelete: Cascade)
  followingId  String
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
  @@unique([followerId, followingId])
}


model Authenticator {
  credentialID         String   @id @default(cuid())
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Int
  transports           String 
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}